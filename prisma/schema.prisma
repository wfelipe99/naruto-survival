// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  characters    Character[]
  accounts      Account[]
  sessions      Session[]
}

enum CharacterState {
  Alive
  Dead
  Sleeping
}

model Character {
  id                String         @id @default(cuid())
  userId            String
  name              String         @unique
  state             CharacterState @default(Alive)
  cognomen          String         @unique
  gender            String
  sexualOrientation String
  age               Int
  weight            Decimal        @db.Decimal(10, 2)
  height            Decimal        @db.Decimal(10, 2)
  birthday          String
  bloodType         String
  laterality        String
  favoriteFood      String
  hobby             String
  clan              String
  village           String
  personality       String
  appearance        String
  history           String

  user User @relation(fields: [userId], references: [id])
}

model CharacterVillage {
  id String @id @default(cuid())
}

model Country {
  id          String      @id @default(cuid())
  name        String      @unique
  description String
  population  Int
  militia     Int
  economy     Int
  villages    Village[]
  territories Territory[]
}

model Village {
  id        String  @id @default(cuid())
  countryId String
  name      String
  places    Place[]

  country Country @relation(fields: [countryId], references: [id])
}

model Territory {
  id        String  @id @default(cuid())
  countryId String
  name      String
  places    Place[]

  country Country @relation(fields: [countryId], references: [id])
}

model Place {
  id          String  @id @default(cuid())
  villageId   String?
  territoryId String?
  placeId     String?
  name        String
  isPostable  Boolean
  places      Place[] @relation("PlacesOfPlace")

  place     Place?     @relation("PlacesOfPlace", fields: [placeId], references: [id])
  village   Village?   @relation(fields: [villageId], references: [id])
  Territory Territory? @relation(fields: [territoryId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
